/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {:

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:}

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno +
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal Formals formal_list;
nonterminal Formal formal;
nonterminal Expression expr;
nonterminal Expressions expr_list1;
nonterminal Expressions expr_list_comma;
nonterminal Cases case_list;
nonterminal Expression lets;

precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LT, LE, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence nonassoc NEG;
precedence nonassoc AT;
precedence nonassoc DOT;


/* Precedence declarations go here. */

program
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n,
		                   AbstractTable.idtable.addString("Object"),
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
    | error SEMI {: :}
	;

formal_list
    ::= formal:f
        {: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
    | formal_list:fl COMMA formal:f
        {: RESULT = fl.appendElement(f); :}
    |   {: RESULT = (new Formals(curr_lineno())); :}
    ;

feature_list
    ::= feature:f
        {: RESULT = (new Features(curr_lineno())).appendElement(f); :}
    | feature_list:fl feature:f
        {: RESULT = fl.appendElement(f); :}
    |   /* or empty list */
       {: RESULT = (new Features(curr_lineno())); :}
    ;

feature
    ::= OBJECTID:id LPAREN formal_list:f RPAREN COLON TYPEID:type LBRACE expr:e RBRACE SEMI
        {: RESULT = new method(curr_lineno(), id, f, type, e); :}
    | OBJECTID:id COLON TYPEID:type ASSIGN expr:e SEMI
        {: RESULT = new attr(curr_lineno(), id, type, e); :}
    | OBJECTID:id COLON TYPEID:type SEMI
        {: RESULT = new attr(curr_lineno(), id , type, (new no_expr(curr_lineno()))); :}
    | error {: :}
    | TYPEID error SEMI {::}
    ;

formal
    ::= OBJECTID:id COLON TYPEID:type
        {: RESULT = new formalc(curr_lineno(), id, type); :}
    ;


lets
    ::= OBJECTID:id COLON TYPEID:type COMMA lets:l
        // doesn't have optional init.
        {: RESULT = new let(curr_lineno(), id, type, new no_expr(curr_lineno()), l); :}
    | OBJECTID:id COLON TYPEID:type ASSIGN expr:e COMMA lets:l
        {: RESULT = new let(curr_lineno(), id, type, e, l); :}
    | OBJECTID:id COLON TYPEID:type IN expr:e
        {: RESULT = new let(curr_lineno(), id, type, new no_expr(curr_lineno()), e); :}
    | OBJECTID:id COLON TYPEID:type ASSIGN expr:e1 IN expr:e2
        {: RESULT = new let(curr_lineno(), id, type, e1, e2); :}
    ;
/* for the { } case */
expr_list1
    ::= expr:e SEMI
        {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
    | expr_list1:el expr:e SEMI
        {: RESULT = el.appendElement(e); :}
    | expr_list1:el error SEMI
    ;

expr_list_comma
    ::= expr:e
        {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
    | expr_list_comma:el COMMA expr:e
        {: RESULT = el.appendElement(e); :}
    | {: RESULT = new Expressions(curr_lineno()); :}
    ;

case_list
    ::= OBJECTID:id COLON TYPEID:type DARROW expr:e SEMI
        {: RESULT = new Cases(curr_lineno()).appendElement(new branch(curr_lineno(), id, type, e));:}
    |   case_list:cl OBJECTID:id COLON TYPEID:type DARROW expr:e SEMI
        {: RESULT = cl.appendElement(new branch(curr_lineno(), id, type, e));:}
    ;

expr
    ::= OBJECTID:id ASSIGN expr:e
        {: RESULT = new assign(curr_lineno(), id, e); :}
    | OBJECTID:id ASSIGN error
    | INT_CONST:t
        {: RESULT = new int_const(curr_lineno(), t); :}
    | STR_CONST:t
        {: RESULT = new string_const(curr_lineno(), t); :}
    | BOOL_CONST:b
        {: RESULT = new bool_const(curr_lineno(), b); :}
    | OBJECTID:t
        {: RESULT = new object(curr_lineno(), t); :} /* will it blend? */
    | expr:e1 PLUS expr:e2
        {: RESULT = new plus(curr_lineno(), e1, e2); :}
    | expr:e1 MINUS expr:e2
        {: RESULT = new sub(curr_lineno(), e1, e2); :}
    | expr:e1 MULT expr:e2
        {: RESULT = new mul(curr_lineno(), e1, e2); :}
    | expr:e1 DIV expr:e2
        {: RESULT = new divide(curr_lineno(), e1, e2); :}
    | ISVOID expr:e
        {: RESULT = new isvoid(curr_lineno(), e); :}
    | NEG expr:e
        {: RESULT = new neg(curr_lineno(), e); :}
    | expr:e1 LT expr:e2
        {: RESULT = new lt(curr_lineno(), e1, e2); :}
    | expr:e1 LE expr:e2
        {: RESULT = new leq(curr_lineno(), e1, e2); :}
    | expr:e1 EQ expr:e2
        {: RESULT = new eq(curr_lineno(), e1, e2); :}
    | NEW TYPEID:type
        {: RESULT = new new_(curr_lineno(), type);:}
    // FIXED IN CLASS
    | WHILE expr:e LOOP error
    // | WHILE error POOL
    | WHILE expr:e1 LOOP expr:e2 POOL
        {: RESULT = new loop(curr_lineno(), e1, e2); :}
    | IF expr:e1 THEN expr:e2 ELSE expr:e3 FI
        {: RESULT = new cond(curr_lineno(), e1, e2, e3); :}
    | LBRACE expr_list1:el RBRACE
        {: RESULT = new block(curr_lineno(), el); :}
    | LPAREN expr:e RPAREN
        {: RESULT = e; :}
    // | OBJECTID:id LPAREN RPAREN
        // {: :}
    // | OBJECTID:id LPAREN expr:e RPAREN
    //     {::}
    // | OBJECTID:id LPAREN expr_list_comma:el RPAREN
    //     {::}
    // |   LPAREN expr:e RPAREN
    //     {: RESULT = new (curr_lineno(), e); :}
    | CASE expr:e OF case_list:cl ESAC
        {: RESULT = new typcase(curr_lineno(), e, cl); :}
    | CASE error ESAC
        {::}
    | expr:e AT TYPEID:type DOT OBJECTID:id LPAREN expr_list_comma:el RPAREN
        {: RESULT = new static_dispatch(curr_lineno(), e, type, id, el); :}
    | expr:e DOT OBJECTID:id LPAREN expr_list_comma:el RPAREN
        {: RESULT = new dispatch(curr_lineno(), e, id, el); :}
    | OBJECTID:id LPAREN expr_list_comma:el RPAREN
        {: RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")), id, el); :}

    /* LIST takes SYMBOL SYMBOL EXPRESSION EXPRESSION
     * let a:Int <- 10, b:Int <- 20 in a + b
     *        let
       / | \        \
      a Int 10      let
               / |  \      \
              b Int 20   a + b
    * LET let_remainder:e
    */
    // | LET OBJECTID:id COLON TYPEID:type IN expr:e
    //     {: RESULT = new let(curr_lineno(), id, type, (new no_expr(curr_lineno())), e); :}
    // | LET OBJECTID:id COLON TYPEID:type ASSIGN expr:e1 IN expr:e2
    //     {: RESULT = new let(curr_lineno(), id, type, e1, e2); :}
    | LET lets:l
        {: RESULT = l; :}
    | NOT expr:e
        {: RESULT = new comp(curr_lineno(), e); :}
    | error
    ;

/* Feature list may be empty, but no empty features in list. */
// feature_list
// 	::= /* empty */
// 	    {: RESULT = new Features(curr_lineno()); :}
// 	;
